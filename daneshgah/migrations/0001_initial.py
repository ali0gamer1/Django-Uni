# Generated by Django 4.2.5 on 2023-10-31 15:22

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uniquenum', models.CharField(max_length=20)),
                ('phone_number', models.CharField(max_length=11)),
                ('national_id', models.CharField(max_length=10)),
                ('gender', models.BooleanField(default=False)),
                ('birth_date', models.DateField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('selection_start', models.DateTimeField()),
                ('selection_end', models.DateTimeField()),
                ('fix_start', models.DateTimeField()),
                ('fix_end', models.DateTimeField()),
                ('emergency_drop_end', models.DateTimeField()),
                ('exam_start', models.DateTimeField()),
                ('term_end', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='IT',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('daneshgah.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('expertise', models.CharField(max_length=100)),
                ('level', models.CharField(max_length=100)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.department')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('daneshgah.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('start_year', models.DateField()),
                ('start_term', models.DateField()),
                ('average_mark', models.FloatField()),
                ('military_service', models.BooleanField(default=False)),
                ('sanavat', models.IntegerField()),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('daneshgah.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('group', models.CharField(max_length=20)),
                ('credits', models.IntegerField()),
                ('degree', models.IntegerField()),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.department')),
            ],
        ),
        migrations.CreateModel(
            name='AbstractCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('credit', models.IntegerField()),
                ('course_type', models.CharField(max_length=20)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.department')),
                ('dependencies', models.ManyToManyField(blank=True, related_name='parents', to='daneshgah.abstractcourse')),
                ('necessities', models.ManyToManyField(blank=True, related_name='sisters', to='daneshgah.abstractcourse')),
            ],
        ),
        migrations.CreateModel(
            name='TermicCourse',
            fields=[
                ('abstractcourse_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='daneshgah.abstractcourse')),
                ('course_time', models.TextField()),
                ('exam_date', models.DateTimeField()),
                ('exam_location', models.CharField(max_length=255)),
                ('capaciry', models.IntegerField()),
                ('term', models.IntegerField()),
                ('professor', models.ManyToManyField(related_name='termiccourses', to='daneshgah.professor')),
            ],
            bases=('daneshgah.abstractcourse',),
        ),
        migrations.CreateModel(
            name='TermDrop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.BooleanField(default=False)),
                ('request', models.TextField()),
                ('response', models.TextField()),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.term')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.student')),
            ],
        ),
        migrations.AddField(
            model_name='term',
            name='courses',
            field=models.ManyToManyField(related_name='courses', to='daneshgah.termiccourse'),
        ),
        migrations.AddField(
            model_name='term',
            name='professors',
            field=models.ManyToManyField(related_name='asatid', to='daneshgah.professor'),
        ),
        migrations.AddField(
            model_name='term',
            name='students',
            field=models.ManyToManyField(related_name='terms', to='daneshgah.student'),
        ),
        migrations.AddField(
            model_name='student',
            name='current_courses',
            field=models.ManyToManyField(related_name='studentsstudying', to='daneshgah.termiccourse'),
        ),
        migrations.AddField(
            model_name='student',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.department'),
        ),
        migrations.AddField(
            model_name='student',
            name='field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.field'),
        ),
        migrations.AddField(
            model_name='student',
            name='passed_courses',
            field=models.ManyToManyField(related_name='studentswhopassed', to='daneshgah.termiccourse'),
        ),
        migrations.AddField(
            model_name='student',
            name='supervisor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.professor'),
        ),
        migrations.CreateModel(
            name='SelectedCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admitted', models.BooleanField(default=False)),
                ('courses', models.ManyToManyField(related_name='courses2', to='daneshgah.termiccourse')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.student')),
            ],
        ),
        migrations.CreateModel(
            name='RevisionRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request', models.TextField()),
                ('response', models.TextField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.termiccourse')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.student')),
            ],
        ),
        migrations.AddField(
            model_name='professor',
            name='field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.field'),
        ),
        migrations.AddField(
            model_name='professor',
            name='taught_courses',
            field=models.ManyToManyField(related_name='professorsdone', to='daneshgah.abstractcourse'),
        ),
        migrations.CreateModel(
            name='EmergencyDrop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.BooleanField(default=False)),
                ('request', models.TextField()),
                ('response', models.TextField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.termiccourse')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.student')),
            ],
        ),
        migrations.CreateModel(
            name='EdCert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.BooleanField(default=False)),
                ('request', models.TextField()),
                ('response', models.TextField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.student')),
            ],
        ),
        migrations.CreateModel(
            name='DeputyofEducation',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.department')),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.field')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('daneshgah.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CourseStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.FloatField(default=20.0)),
                ('term', models.ManyToManyField(related_name='FixME', to='daneshgah.term')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.termiccourse')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='daneshgah.student')),
            ],
        ),
    ]
